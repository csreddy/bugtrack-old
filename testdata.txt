[
  '{{repeat(1, 1)}}',
  {
    id: '{{integer(1000, 9999)}}',
    createdAt: '{{date(new Date(2014, 0, 1), new Date(), "YYYY-MM-ddThh:mm:ss:f")}}'+'Z',
    modifiiedAt: '{{date(new Date(2014, 0, 1), new Date(), "YYYY-MM-ddThh:mm:ss:f")}}'+'Z',
    kind: function(){
    return ["Bug", "Task", "RFE", "Other"][0];
    },
    status: function(){
    return ["New", "Verify", "Fix", "Test", "Ship", "Closed", "Will not fix", "External"][Math.floor((Math.random() * 7) + 1)];
    },
    title: '{{lorem(8, "words")}}',
    submittedBy: '{{firstName()}} {{surname()}}',
    assignTo: '{{firstName()}} {{surname()}}',
    description: '{{lorem(2, "sentences")}}',
    samplequery: '{{lorem(2, "sentences")}}',
    sampledata: '{{lorem(2, "sentences")}}',
    stacktrace: '{{lorem(1, "paragraphs")}}',
    category: function(){
    return [ "Admin API",
        "Admin License",
        "adminGUI",
        "antennahouse",
        "App Builder",
        "Backup/Restore",
        "Basis",
        "Bi-Temporal",
        "Bugtrack"][Math.floor((Math.random() * 8) + 1)];
    },
    priority: '{{integer(1,7)}}',
    relation: function(){
      return [
            'Requirements task for',
            'Functional Spec task for',
            'Test Specification task for',
            'Test Automation task for',
            'Documentation task for',
            'Sub-task of'
        ][Math.floor((Math.random() * 5) + 1)];
    },
    relatedTo: [
    '{{repeat(4)}}',
    '{{integer(1000, 9999)}}'
    ],
    version: function(){
    return ["7.0-3",
        "7.0-2.4",
        "7.0-2.3",
        "7.0-2.2",
        "7.0-2.1",
        "7.0-2",
        "7.0-1"][Math.floor((Math.random() * 6) + 1)];
    },
    platform: function(){
    return ["all",
        "linux(32-bit)",
        "linux(64-bit)",
        "windows(64-bit)",
        "windows(32-bit)",
        "solaris(sparc)",
        "solaris(opteron)",
        "vmware",
        "OS X",
        "EC2"][Math.floor((Math.random() * 5) + 1)];
    },
    memory: '{{integer(100, 1000)}}'+' mb',
    processors: '{{integer(2, 12)}}',
    note: '{{lorem(1, "paragraphs")}}',
    headline: '{{lorem(1, "sentences")}}',
    supportDescription: '{{lorem(1, "paragraphs")}}',
    workaround: '{{lorem(2, "paragraphs")}}',
    publishStatus: function(){
    return ["Publish", "Not Ready", "Prepare", "Never Publish"][2];
    },
    customerImpact: '{{lorem(3)}}'
  }
]
